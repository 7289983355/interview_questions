package graph;

import java.util.ArrayList;
import java.util.Queue;

import linkedListDemo.LinkedList;

public class BFS {

	static class Edge {

		int src;
		int dest;

		public Edge(int src, int dest) {
			super();
			this.src = src;
			this.dest = dest;
		}

		public int getSrc() {
			return src;
		}

		public void setSrc(int src) {
			this.src = src;
		}

		public int getDest() {
			return dest;
		}

		public void setDest(int dest) {
			this.dest = dest;
		}

	}

	public static void main(String[] args) {

		// Create an array of ArrayLists for 7 nodes
		ArrayList<Edge>[] arrayListOfEdges = new ArrayList[7];

		// Initialize each ArrayList in the array

		for (int i = 0; i < arrayListOfEdges.length; i++) {

			arrayListOfEdges[i] = new ArrayList<Edge>();
		}

		// Add edges to the graph
		arrayListOfEdges[0].add(new Edge(0, 1)); // Edge from node 0 to node 1 with weight 10
		arrayListOfEdges[0].add(new Edge(0, 2)); // Edge from node 0 to node 2 with weight 15

		arrayListOfEdges[1].add(new Edge(1, 0)); // Edge from node 1 to node 3 with weight 5
		arrayListOfEdges[1].add(new Edge(1, 3));

		arrayListOfEdges[2].add(new Edge(2, 0));
		arrayListOfEdges[2].add(new Edge(2, 4));

		arrayListOfEdges[3].add(new Edge(3, 1));
		arrayListOfEdges[3].add(new Edge(3, 4));
		arrayListOfEdges[3].add(new Edge(3, 5));

		arrayListOfEdges[4].add(new Edge(4, 2));
		arrayListOfEdges[4].add(new Edge(4, 3));
		arrayListOfEdges[4].add(new Edge(4, 5));

		arrayListOfEdges[1].add(new Edge(5, 3));
		arrayListOfEdges[1].add(new Edge(5, 4));
		arrayListOfEdges[1].add(new Edge(5, 6));

		arrayListOfEdges[1].add(new Edge(6, 5));

		bfsSearch(arrayListOfEdges, 7);

	}

	private static void bfsSearch(ArrayList<Edge>[] arrayListOfEdges, int i) {

		Queue<Integer> q = new LinkedList<>();

	}

}
